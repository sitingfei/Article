package cc.wudoumi.article.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cc.wudoumi.article.bean.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, Integer.class, "id", false, "ID");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property IdFrom = new Property(3, Integer.class, "idFrom", false, "id_from");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(6, String.class, "summary", false, "SUMMARY");
        public final static Property PraiseNum = new Property(7, Integer.class, "praiseNum", false, "praise_num");
        public final static Property ThemeImage = new Property(8, String.class, "themeImage", false, "theme_image");
        public final static Property IdType = new Property(9, Integer.class, "idType", false, "id_type");
    };


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: _id
                "'ID' INTEGER," + // 1: id
                "'TIME' INTEGER," + // 2: time
                "'id_from' INTEGER," + // 3: idFrom
                "'AUTHOR' TEXT," + // 4: author
                "'TITLE' TEXT," + // 5: title
                "'SUMMARY' TEXT," + // 6: summary
                "'praise_num' INTEGER," + // 7: praiseNum
                "'theme_image' TEXT," + // 8: themeImage
                "'id_type' INTEGER);"); // 9: idType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        Integer idFrom = entity.getIdFrom();
        if (idFrom != null) {
            stmt.bindLong(4, idFrom);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(7, summary);
        }
 
        Integer praiseNum = entity.getPraiseNum();
        if (praiseNum != null) {
            stmt.bindLong(8, praiseNum);
        }
 
        String themeImage = entity.getThemeImage();
        if (themeImage != null) {
            stmt.bindString(9, themeImage);
        }
 
        Integer idType = entity.getIdType();
        if (idType != null) {
            stmt.bindLong(10, idType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // idFrom
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // summary
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // praiseNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // themeImage
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // idType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIdFrom(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSummary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPraiseNum(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setThemeImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIdType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
